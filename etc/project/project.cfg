#             Project specific settings

[v]
project-parts=
    env
    grp
    i18n
    scripts
    omelette
    instance
    init_django
    instance1
    djangosettings
project-programs=
#    30 celery_beat (stopwaitsecs=600 startsecs=10) ${buildout:directory}/bin/django_manage [celery beat --schedule=${buildout:directory}/var/lib/celery/celerybeat-schedule --pidfile=${buildout:directory}/var/celerybeat.pid --loglevel=INFO]  ${buildout:directory} true ${v:sys-user}
#    50 celery_d    (stopwaitsecs=600 startsecs=10) ${buildout:directory}/bin/django_manage [celery worker --pidfile=${buildout:directory}/var/celery_worker.pid --loglevel=INFO]  ${buildout:directory} true ${v:sys-user}
    70 instance1   (autostart=true) ${buildout:directory}/bin/paster [serve ${buildout:directory}/etc/wsgi_instance1.ini] ${buildout:directory} true ${v:sys-user}

[buildout]
find-links=
    http://cairographics.org/releases/
    http://dist.plone.org/thirdparty/
    http://downloads.egenix.com/python/egenix-mx-base-3.2.1.tar.gz
    http://downloads.egenix.com/python/egenix-mx-base-3.2.4.tar.gz
    http://downloads.egenix.com/python/index/ucs4/
    http://downloads.egenix.com/python/index/ucs4/egenix-mx-base/3.2.1/
    http://downloads.egenix.com/python/index/ucs4/egenix-mx-base/3.2.2/
    http://initd.org/pub/software/psycopg/PSYCOPG-2-0/
extra-paths=
extras =
eggs =
# change to your django app dir
sources=sources
auto-checkout += dj.paste

[sources]
# see http://pypi.python.org/pypi/mr.developer for documentation

[sources]
dj.paste = git https://github.com/kiorky/dj.paste.git

[ubuntulibs]
recipe = plone.recipe.command
update-command = ${ubuntulibs:command}
command =
    ln -sfv /usr/lib/x86_64-linux-gnu/libz.so        ${buildout:directory}/.libs/
    ln -sfv /usr/lib/x86_64-linux-gnu/libjpeg.so     ${buildout:directory}/.libs/
    ln -sfv /usr/lib/x86_64-linux-gnu/libfreetype.so ${buildout:directory}/.libs/

[scriptsc]
extra-paths=${buildout:extra-paths}
    ${buildout:sources-dir}
    ${v:pkgdir}
# Scripts generated filtering
scripts=
    django-admin.py
    django_manage
    paster
    bpython
    nosetests
    nose
#z3c.checkversions
    checkversions
#zope2
    paster    
interpreter = djangopy
dependent-scripts=true

[djangosettings]
recipe = collective.recipe.template[genshi]:genshi
output=${v:pkgdir}/local_settings.py
input=${buildout:directory}/etc/templates/settings.py
mode=700

[scripts]
recipe=zc.recipe.egg
interpreter = djangopy
<=scriptsc
django_manage-initialization=
    import os
    os.environ['DJANGO_SETTINGS_MODULE'] = '${v:dsm}'
entry-points=
    django_manage=django.core.management:execute_from_command_line
eggs=    
#Django
    celery
    CherryPy
    coverage
    cryptacular
    Django
    django-celery
    django-guardian
    django-nose
    django-registration
    django-templated-email
    dj.paste
    gunicorn
    lxml
    Paste
    PasteDeploy
    Pillow
    repoze.vhm
    South
    SQLAlchemy
    WebError

[omelette]
recipe = collective.recipe.omelette
eggs = ${scripts:eggs}
packages =${scripts:extra-paths}

[instance]
mode=700
recipe = collective.recipe.template[genshi]:genshi
input =  ${buildout:directory}/etc/templates/wsgi/paster.ini.in
output = ${buildout:directory}/etc/wsgi_instance.ini
host=${hosts:instance}
port=${ports:instance}
debugtoolbar.eval_exc=true
intercept_exc_debug=debug
debug=${v:debug}
dsm=${v:dsm}
wsgi_server=${v:wsgi_server}

[instance1]
<= instance
output = ${buildout:directory}/etc/wsgi_instance1.ini
host=${hosts:instance1}
port=${ports:instance1}

[chmod]
recipe = plone.recipe.command
update-command = ${chmod:command}
command=
    chmod     650 .installed.cfg
    chmod     750 ${buildout:directory}/bin/*
    chmod -v  750 ${buildout:directory}/etc/init.d/*
    chmod -Rf 750 ${buildout:directory}/etc
    chmod -Rf 750 ${buildout:sources-dir}
    chmod -Rf 750 ${buildout:directory}/var
    chmod     750 ${buildout:directory}

[chown]
recipe = plone.recipe.command
update-command = ${chown:command}
command=
    chown -Rf  ${v:sys-user}:${v:sys-group}  ${buildout:directory}/etc
    chown -Rf  ${v:sys-user}:${v:sys-group}  ${buildout:directory}/var
    chown -Rf  ${v:sys-user}:${v:sys-group}  ${buildout:sources-dir}
    chown      ${v:sys-user}:${v:sys-group}  ${buildout:directory}
    find ${buildout:directory} -type d -name var -exec chown -R ${v:sys-user}:${v:sys-group} {} \;

[mkdirs]
recipe = plone.recipe.command
update-command = ${mkdirs:command}
command=
    mkdir -p ${buildout:directory}/var/log/apache;
    mkdir -pv ${buildout:directory}/var/lib/celery/celerybeat-schedule/.empty;

[staticfiles]
recipe = plone.recipe.command
update-command = ${staticfiles:command}
command=
    cd ${buildout:directory};
    ${buildout:directory}/bin/django_manage collectstatic --noinput;

[i18n]
recipe = plone.recipe.command
update-command = ${i18n:command}
command=
    export PATH="${buildout:directory}/bin":$PATH
    cd $d
    export DJANGO_SETTINGS_MODULE="settings"
    django_manage compilemessages;

[init_django]
recipe = plone.recipe.command
update-command = ${init_django:command}
command=
    export PATH="${buildout:directory}/bin":$PATH
    export DJANGO_SETTINGS_MODULE="settings"
    d=${v:pkgdir}
    cd $d
    django_manage syncdb --all
    django_manage migrate --fake --all

[env]
recipe = gocept.recipe.env
PS1 =
TERMCAP =
SSH_CLIENT =
SSH_TTY =
SSH_CONNECTION =
LANG =
SHELL =

[grp]
recipe = collective.recipe.grp

# vim:set ft=cfg:
